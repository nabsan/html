<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>nabsan.github.io</title>
  <subtitle>Blog of developer nabsan.</subtitle>
  <link href="http://nabsan.github.io/" />
  <link type="application/atom+xml" rel="self" href="http://nabsan.github.io/atom.xml" />
  <updated>2014-03-06T23:10:59+09:00</updated>
  <id>http://nabsan.github.io/</id>
  <author>
    <name>Nabsan</name>
    <email>nabsan@ikarosu.net</email>
  </author>
  
  
  <entry>
    <id>http://nabsan.github.io/2014/03/markdown-basic</id>
    <link type="text/html" rel="alternate" href="http://nabsan.github.io/2014/03/markdown-basic" />
    <title>Markdown Basic</title>
    <updated>2014-03-06T00:00:00+09:00</updated>
    <author>
      <name>Nabsan</name>
      <email>nabsan@ikarosu.net</email>
    </author>
    <content type="html">&lt;hr /&gt;

&lt;h1&gt;markdown考察&lt;/h1&gt;

&lt;hr /&gt;

&lt;h2&gt;強調表現&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;斜体&lt;/em&gt;
&lt;strong&gt;太字&lt;/strong&gt;
&lt;strong&gt;&lt;em&gt;太字かつ斜体&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;見出し表現&lt;/h2&gt;

&lt;h1&gt;大見出し&lt;/h1&gt;

&lt;h2&gt;中見出し&lt;/h2&gt;

&lt;h3&gt;小見出し&lt;/h3&gt;

&lt;h2&gt;リスト(通常）&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;弾丸リスト1行&lt;/li&gt;
&lt;li&gt;弾丸リスト2行&lt;/li&gt;
&lt;li&gt;数字リスト1行&lt;/li&gt;
&lt;li&gt;数字リスト2行&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;リスト(インデックス付き:ネスト表現)&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;トップレベル弾丸1行目

&lt;ul&gt;
&lt;li&gt;サブレベル弾丸1行目&lt;/li&gt;
&lt;li&gt;サブレベル弾丸2行目&lt;/li&gt;
&lt;li&gt;(数字リストも同様に利用可能です)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;引用&lt;/h2&gt;

&lt;p&gt;1行目につければその次行も引用となります
複数行あっても
引用とみなされます。&lt;/p&gt;

&lt;p&gt;引用記号はそれぞれの行頭につけても
引用とみなされます。&lt;/p&gt;

&lt;h2&gt;リンク(aタグ)&lt;/h2&gt;

&lt;p&gt;文章の中の&lt;a href=&quot;http://hogehoge.com/&quot; title=&quot;Alt:別名ツールチップ文字列&quot;&gt;サンプルリンク&lt;/a&gt; です。
直接URLを表示したければ &lt;a href=&quot;http://hogehoge.com/&quot;&gt;http://hogehoge.com/&lt;/a&gt;とするとよい。&lt;/p&gt;

&lt;h2&gt;画像表示(imgタグ)&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://hoge.com/myimage.png&quot; title=&quot;alt:別名ツールチップ文字列&quot; alt=&quot;画像リンク切れの時に表示する文字列&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;水平線(↓は全部HRとなる。)&lt;/h2&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;h2&gt;コードを張り付ける場合&lt;/h2&gt;

&lt;p&gt;(空行)
&lt;code&gt;python:index.py
  print 'hello py world.'
&lt;/code&gt;
(空行)&lt;/p&gt;

&lt;p&gt;また、&lt;code&gt;print 'hello py world'&lt;/code&gt;という1行表記もOK。&lt;/p&gt;

&lt;h2&gt;テーブル&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;Left align &lt;/th&gt;
&lt;th align=&quot;right&quot;&gt; Right Align &lt;/th&gt;
&lt;th align=&quot;center&quot;&gt; Center align&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;h2&gt;TeX記法による数式&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;math
TEXをここに
&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;markdown無効化&lt;/h2&gt;

&lt;p&gt;「￥」バックスラッシュで無効化できます&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://nabsan.github.io/2014/03/hello2</id>
    <link type="text/html" rel="alternate" href="http://nabsan.github.io/2014/03/hello2" />
    <title>Hello</title>
    <updated>2014-03-04T00:00:00+09:00</updated>
    <author>
      <name>Nabsan</name>
      <email>nabsan@ikarosu.net</email>
    </author>
    <content type="html">&lt;p&gt;This my new blog. I plan to post solutions to problems I find my self in when I coding as a reference for myself, and for others.&lt;/p&gt;

&lt;p&gt;The blog is built with &lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt;Jekyll&lt;/a&gt;, a static site generator. You can check out the &lt;a href=&quot;https://github.com/alexpearce/alexpearce.github.com&quot;&gt;source on GitHub&lt;/a&gt;, along with a few other projects I have.&lt;/p&gt;

&lt;p&gt;There are many wonderful resources I used to build this site, most of which I use on a regular basis.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://h5bp.com&quot;&gt;HTML5 Boilerplate&lt;/a&gt; for solid HTML and CSS templates.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.google.com/webfonts&quot;&gt;Google Web Fonts&lt;/a&gt; for the fonts I use here, particularly &lt;a href=&quot;http://www.google.com/webfonts/specimen/Pacifico&quot;&gt;Pacifico&lt;/a&gt; for the fancy logo and &lt;a href=&quot;http://www.google.com/webfonts/specimen/Asap&quot;&gt;Asap&lt;/a&gt; for headers. The body type is Palatino Linotype.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com&quot;&gt;Stack Overflow&lt;/a&gt; for answering all my programming questions. I'm a &lt;a href=&quot;http://stackoverflow.com/users/596068/alex&quot;&gt;semi-active user there&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://premiumpixels.com&quot;&gt;Premium Pixels&lt;/a&gt; provide amazing quality PSDs for web design. Although I didn't use any for this site, it's worth the mention.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If you have any questions or suggestion, please feel free to ask.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://nabsan.github.io/2014/03/hello2</id>
    <link type="text/html" rel="alternate" href="http://nabsan.github.io/2014/03/hello2" />
    <title>Hello2</title>
    <updated>2014-03-04T00:00:00+09:00</updated>
    <author>
      <name>Nabsan</name>
      <email>nabsan@ikarosu.net</email>
    </author>
    <content type="html">&lt;p&gt;This my new blog. I plan to post solutions to problems I find my self in when I coding as a reference for myself, and for others.&lt;/p&gt;

&lt;p&gt;The blog is built with &lt;a href='https://github.com/mojombo/jekyll'&gt;Jekyll&lt;/a&gt;, a static site generator. You can check out the &lt;a href='https://github.com/alexpearce/alexpearce.github.com'&gt;source on GitHub&lt;/a&gt;, along with a few other projects I have.&lt;/p&gt;

&lt;p&gt;There are many wonderful resources I used to build this site, most of which I use on a regular basis.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://h5bp.com'&gt;HTML5 Boilerplate&lt;/a&gt; for solid HTML and CSS templates.&lt;/li&gt;

&lt;li&gt;&lt;a href='http://www.google.com/webfonts'&gt;Google Web Fonts&lt;/a&gt; for the fonts I use here, particularly &lt;a href='http://www.google.com/webfonts/specimen/Pacifico'&gt;Pacifico&lt;/a&gt; for the fancy logo and &lt;a href='http://www.google.com/webfonts/specimen/Asap'&gt;Asap&lt;/a&gt; for headers. The body type is Palatino Linotype.&lt;/li&gt;

&lt;li&gt;&lt;a href='http://stackoverflow.com'&gt;Stack Overflow&lt;/a&gt; for answering all my programming questions. I&amp;#8217;m a &lt;a href='http://stackoverflow.com/users/596068/alex'&gt;semi-active user there&lt;/a&gt;.&lt;/li&gt;

&lt;li&gt;&lt;a href='http://premiumpixels.com'&gt;Premium Pixels&lt;/a&gt; provide amazing quality PSDs for web design. Although I didn&amp;#8217;t use any for this site, it&amp;#8217;s worth the mention.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have any questions or suggestion, please feel free to ask.&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <id>http://nabsan.github.io/2013/05/hwave_ecoral.js</id>
    <link type="text/html" rel="alternate" href="http://nabsan.github.io/2013/05/hwave_ecoral.js" />
    <title>ecoral.js ver 1.0..</title>
    <updated>2013-05-14T00:00:00+09:00</updated>
    <author>
      <name>Nabsan</name>
      <email>nabsan@ikarosu.net</email>
    </author>
    <content type="html">&lt;p&gt;There is a sample page to use ecoral.js. most of which I use on a regular basis.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://ikarosu.net/hw/ecoral_sample.html&quot;&gt;ecoral.js sample&lt;/a&gt; for estimating the eco cost.&lt;/li&gt;
&lt;li&gt;[download from Github] (https://github.com/nabsan/hwave.git)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If you have any questions or suggestion, please feel free to ask.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://nabsan.github.io/2013/02/python-and-root-on-os-x</id>
    <link type="text/html" rel="alternate" href="http://nabsan.github.io/2013/02/python-and-root-on-os-x" />
    <title>Python and ROOT on OS X</title>
    <updated>2013-02-25T00:00:00+09:00</updated>
    <author>
      <name>Nabsan</name>
      <email>nabsan@ikarosu.net</email>
    </author>
    <content type="html">&lt;p&gt;I don't find myself using &lt;a href=&quot;http://root.cern.ch/drupal/&quot;&gt;ROOT&lt;/a&gt; much on my home machine, but when I do there's usually something broken.&lt;/p&gt;

&lt;p&gt;In this case, it was when trying to use &lt;a href=&quot;http://root.cern.ch/drupal/content/pyroot&quot;&gt;PyROOT&lt;/a&gt;, a ROOT interface for Python, that this error made my day:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ROOT&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Traceback&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;most&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/usr/local/root/lib/ROOT.py&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;85&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;libPyROOT&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;_root&lt;/span&gt;
&lt;span class=&quot;ne&quot;&gt;ImportError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dlopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;usr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libPyROOT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Library&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loaded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@rpath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libRIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Referenced&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;usr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libPyROOT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Reason&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;found&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is using the install as documented in &lt;a href=&quot;#&quot;&gt;a previous post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The problem is that the library Python loads can't find another library it needs. To fix this, the &lt;code&gt;DYLD_LIBRARY_PATH&lt;/code&gt; variable needs to be set:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;export DYLD_LIBRARY_PATH=$ROOTSYS/lib:$DYLD_LIBRARY_PATH
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This can be executed directly in the shell or placed in a &lt;code&gt;.bashrc&lt;/code&gt;-type file.&lt;/p&gt;

&lt;h2&gt;Caveat&lt;/h2&gt;

&lt;p&gt;This solution is not without fault. Namely, whenever one runs a command with &lt;code&gt;sudo&lt;/code&gt;, the following warning appears:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;dyld: DYLD_ environment variables being ignored because main executable (/usr/bin/sudo) is setuid or setgid
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is a &lt;a href=&quot;https://discussions.apple.com/thread/4143805?start=0&amp;amp;tstart=0&quot;&gt;well&lt;/a&gt; &lt;a href=&quot;http://stackoverflow.com/questions/12064725/dyld-dyld-environment-variables-being-ignored-because-main-executable-usr-bi&quot;&gt;known&lt;/a&gt; issue with OS X 10.8 (Mountain Lion), complete with a &lt;a href=&quot;http://openradar.appspot.com/11894054&quot;&gt;bug report&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;At least &lt;a href=&quot;http://apple.stackexchange.com/a/76213&quot;&gt;one workaround&lt;/a&gt; is available, but for now I put up with the message in the shell I want to use PyROOT in, manually setting &lt;code&gt;DYLD_LIBRARY_PATH&lt;/code&gt; when needed.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://nabsan.github.io/2012/11/fixing-a-tmva-error</id>
    <link type="text/html" rel="alternate" href="http://nabsan.github.io/2012/11/fixing-a-tmva-error" />
    <title>Fixing a TMVA Error</title>
    <updated>2012-11-02T00:00:00+09:00</updated>
    <author>
      <name>Nabsan</name>
      <email>nabsan@ikarosu.net</email>
    </author>
    <content type="html">&lt;p&gt;If you're using the multivariate analysis package &lt;a href=&quot;http://tmva.sourceforge.net&quot;&gt;TMVA&lt;/a&gt; and are running in to the following error on training or testing:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;--- &amp;lt;FATAL&amp;gt; Tools: &amp;lt;GetSeparation&amp;gt; signal and background histograms have different or invalid dimensions
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It might be failing because you're giving it one or more &lt;a href=&quot;http://en.wikipedia.org/wiki/Not_a_Number&quot;&gt;&lt;code&gt;NaN&lt;/code&gt; values&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;By default, TMVA selects its training and testing data randomly from the input data. It will do this in a repeatable fashion unless you give &lt;code&gt;0&lt;/code&gt; as the value to the &lt;code&gt;RandomSeed&lt;/code&gt; option in the splitting options, so you may either get this error each time you run TMVA or just occasionally.&lt;/p&gt;

&lt;p&gt;After a couple weeks of working around the issue, I discovered that I had a single event (a &lt;em&gt;single&lt;/em&gt; event, mind you!) with a negative value for a particular variable, which I gave the log of to TMVA. In C++, the logarithm of a negative number is represented as a &lt;code&gt;NaN&lt;/code&gt; value, and it was this which was causing the error.&lt;/p&gt;

&lt;p&gt;You can either apply a cut to the input data:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;factory-&amp;gt;PrepareTrainingAndTestTree(&amp;quot;troublesome_var &amp;gt; 0&amp;quot;, &amp;quot;troublesome_var &amp;gt; 0&amp;quot;, splitOptions);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or make sure that the events with bad values aren't present in your input data.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;http://tmva.sourceforge.net/docu/TMVAUsersGuide.pdf&quot;&gt;TMVA user's guide&lt;/a&gt; documents the &lt;code&gt;PrepareTrainingAndTestTree&lt;/code&gt; method, amongst other things.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://nabsan.github.io/2012/10/merging-root-ntuples</id>
    <link type="text/html" rel="alternate" href="http://nabsan.github.io/2012/10/merging-root-ntuples" />
    <title>Merging ROOT Ntuples</title>
    <updated>2012-10-28T00:00:00+09:00</updated>
    <author>
      <name>Nabsan</name>
      <email>nabsan@ikarosu.net</email>
    </author>
    <content type="html">&lt;p&gt;You have multiple &lt;code&gt;.root&lt;/code&gt; files containing ntuples and wish to merge them in to one. For example, you have 3 files called &lt;code&gt;ntuple.0.root&lt;/code&gt;, &lt;code&gt;ntuple.1.root&lt;/code&gt;, and &lt;code&gt;ntuple.2.root&lt;/code&gt;. The structure of each is identical, for instance:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;ntuple.X.root:
  DecayModeOne
    DecayTree
  DecayModeTwo
    DecayTree
  GetIntegratedLuminosity
    LumiTuple
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here, the indentation represents the folder structure, and the deepest elements (&lt;code&gt;DecayTree&lt;/code&gt;, &lt;code&gt;LumiTuple&lt;/code&gt;) are &lt;code&gt;TTree&lt;/code&gt; objects.&lt;/p&gt;

&lt;p&gt;To merge these files, use the &lt;code&gt;hadd&lt;/code&gt; command (found in &lt;code&gt;$ROOTSYS/bin&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;hadd ntuple.root ntuple.0.root ntuple.1.root ntuple.2.root
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first argument is the desired output ntuple, the remaing arguments are the files to be merged.&lt;/p&gt;

&lt;p&gt;This will produce the following output when using the example structure above:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;hadd Target file: ntuple.root
hadd Source file 1: ntuple.0.root
hadd Source file 2: ntuple.1.root
hadd Source file 3: ntuple.2.root
hadd Target path: ntuple.root:/
hadd Target path: ntuple.root:/DecayModeOne
hadd Target path: ntuple.root:/DecayModeTwo
hadd Target path: ntuple.root:/GetIntegratedLuminosity
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This can will take some time if you're merging lots of data (it took me around 40 minutes to merge 120 ntuples with a total size of 20GB).&lt;/p&gt;

&lt;h2&gt;A Nicer Way&lt;/h2&gt;

&lt;p&gt;If you're using a bash-like shell (&lt;code&gt;bash&lt;/code&gt;, &lt;code&gt;zsh&lt;/code&gt;), then there is an even nicer way of doing things:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;hadd ntuple.root ntuple.&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;0..2&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;.root
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;{0..2}&lt;/code&gt; part is expanded by the shell to &lt;code&gt;ntuple.0.root ntuple.1.root ntuple.2.root&lt;/code&gt;. If you're not a regular bash/zsh user, you can still take advantage of the feature by executing&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;in your shell and then&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;once you're done. Note that this new shell may not have &lt;code&gt;$ROOTSYS/bin&lt;/code&gt; in its &lt;code&gt;PATH&lt;/code&gt;, but can be quickly added.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/path/to/root/bin:&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;



</content>
  </entry>
  
  <entry>
    <id>http://nabsan.github.io/2012/10/jaxodraw-on-os-x</id>
    <link type="text/html" rel="alternate" href="http://nabsan.github.io/2012/10/jaxodraw-on-os-x" />
    <title>JaxoDraw on OS X with MacTex</title>
    <updated>2012-10-27T00:00:00+09:00</updated>
    <author>
      <name>Nabsan</name>
      <email>nabsan@ikarosu.net</email>
    </author>
    <content type="html">&lt;p&gt;Creating &lt;a href=&quot;http://en.wikipedia.org/wiki/Feynman_Diagrams&quot;&gt;Feynman Diagrams&lt;/a&gt; in LaTeX can be a real pain. There are packages to simplify the process, such as &lt;a href=&quot;http://osksn2.hep.sci.osaka-u.ac.jp/~taku/osx/feynmp.html&quot;&gt;feynMP&lt;/a&gt;, but the syntax is verbose, cumbersome, and unintuitive.&lt;/p&gt;

&lt;p&gt;As LaTeX is generally such an unpleasant environment in which to create images, it's often much less painful to use a GUI for the task. For Feynman diagrams there is the open source &lt;a href=&quot;http://jaxodraw.sourceforge.net&quot;&gt;JaxoDraw&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Unfortunately, JaxoDraw didn't work out-of-the-box for me. Namely, I couldn't export the diagrams directly to the vector image format EPS, nor could I draw gluon lines without the program crashing.&lt;/p&gt;

&lt;p&gt;The rest of this post explains how to get JaxoDraw in tip-top condition, so that you'll be able to create and save smashing diagrams like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/jaxodraw-on-os-x/feynman-diagram.png&quot; alt=&quot;A nifty Feynman diagram&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;As JaxoDraw is a Java application, you need to have a Java runtime installed. OS X no longer ships with a Java runtime by default, so open a Terminal window (in &lt;code&gt;/Applications/Utilities/Terminal.app&lt;/code&gt;) and execute the following.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;java -version
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You'll be told that you don't have Java installed and asked if you like to install it, so install it.&lt;/p&gt;

&lt;p&gt;Keep the Terminal window open as we'll be using it later.&lt;/p&gt;

&lt;p&gt;As we're dealing with LaTeX on OS X, we should have the de facto OS X LaTeX distribution installed: &lt;a href=&quot;http://www.tug.org/mactex/&quot;&gt;MacTex&lt;/a&gt;. If don't have it already download the &lt;code&gt;MacTex.pkg&lt;/code&gt; file from the homepage (it's over 2GB in size) and install it.&lt;/p&gt;

&lt;p&gt;Now we should have everything we need, so let's acquire JaxoDraw and get it up and running.&lt;/p&gt;

&lt;h2&gt;Getting JaxoDraw Working&lt;/h2&gt;

&lt;p&gt;Download the &lt;a href=&quot;http://jaxodraw.sourceforge.net/download/bin.html&quot;&gt;JaxoDraw binary&lt;/a&gt; and the &lt;a href=&quot;http://jaxodraw.sourceforge.net/download/dmg.html&quot;&gt;JaxoDraw OS X application&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The OS X application won't launch, but we're going to create a &lt;em&gt;new&lt;/em&gt; application using the icon from the broken application and the binary we just downloaded.&lt;/p&gt;

&lt;p&gt;Unzip the binary archive by double clicking on it and note the &lt;code&gt;jaxodraw-2.1-0.jar&lt;/code&gt; file that's extracted; this is &quot;the binary&quot;. Next, mount the application disk image and execute the following command in Terminal.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cp /Volumes/jaxodraw-2.1-0/JaxoDraw.app/Contents/Resources/jaxoicon2_128.icns &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  ~/Desktop/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will copy the icon image from the JaxoDraw application to your desktop. You can unmount the disk and delete the disk image now; we're done with it.&lt;/p&gt;

&lt;p&gt;We can launch and play around with JaxoDraw straight away. Assuming the JaxoDraw directory that we created when unarchiving the &lt;code&gt;jaxodraw-2.1-0-bin.tar.gz&lt;/code&gt; file is in your &lt;code&gt;Downloads&lt;/code&gt; folder, we can launch JaxoDraw with the following command:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;java -jar ~/Downloads/jaxodraw-2.1-0/jaxodraw-2.1-0.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nearly everything works, but if you try to draw a gluon line (the curly one) the app crashes with an error message similar to&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;code&gt;Invalid memory access of location 0x170f2240 rip=0x1170d055d&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[1]    1188 segmentation fault  java -jar ~/Downloads/jaxodraw-2.1-0/jaxodraw-2.1-0.jar&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Luckily, this problem is &lt;a href=&quot;http://sourceforge.net/tracker/?func=detail&amp;amp;aid=2561249&amp;amp;group_id=142124&amp;amp;atid=751521&quot;&gt;well known&lt;/a&gt; and solvable; we just need to run the file in 32-bit mode:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;java -d32 -jar ~/Downloads/jaxodraw-2.1-0/jaxodraw-2.1-0.jar 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we can draw gluons, huzzah!&lt;/p&gt;

&lt;p&gt;If you now try to export your diagram, however, you'll get another error.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Cannot execute command!
Please try 'Export LaTeX' and run latex manually.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;There's two problems here.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We don't have the axodraw LaTeX package installed,&lt;/li&gt;
&lt;li&gt;JaxoDraw doesn't know where our LaTeX binaries are.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;So let's fix those.&lt;/p&gt;

&lt;p&gt;Download the &lt;a href=&quot;http://sourceforge.net/projects/jaxodraw/files/axodraw4j/axodraw4j_2008_11_19/axodraw4j_2008_11_19.tar.gz/download&quot;&gt;axodraw4j archive&lt;/a&gt; and extract it.&lt;/p&gt;

&lt;p&gt;Assuming you now have a folder called &lt;code&gt;axodraw4j_2008_11_19&lt;/code&gt; in your &lt;code&gt;Downloads&lt;/code&gt; folder, execute the following to create the directories where LaTeX looks for packages in and copy the package to that directory:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir -p ~/Library/texmf/tex/latex
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cp ~/Downloads/axodraw4j_2008_11_19/axodraw4j.sty ~/Library/texmf/tex/latex/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You may need to restart JaxoDraw at this point. To run it, you must use the &lt;code&gt;java&lt;/code&gt; command as above. This is impractical, but we'll fix that in just a minute. (You can delete the axodraw stuff in your Downloads folder now; we're done with it).&lt;/p&gt;

&lt;p&gt;With JaxoDraw restarted, go to &lt;code&gt;Options -&amp;gt; Preferences&lt;/code&gt; and enter &lt;code&gt;/usr/texbin/latex&lt;/code&gt; inside the &quot;LaTeX path&quot; field and &lt;code&gt;/usr/texbin/dvips&lt;/code&gt; inside the &quot;dvips path&quot; field.&lt;/p&gt;

&lt;p&gt;If you now create a test diagram and do &lt;code&gt;File -&amp;gt; Export&lt;/code&gt;, choosing &quot;LaTeX -&gt; EPS&quot; as the file format, JaxoDraw will now successfully export your diagram as an EPS file.&lt;/p&gt;

&lt;p&gt;Great, so now the only thing that's left is to create a more convenient way of launching the app.&lt;/p&gt;

&lt;h2&gt;Creating JaxoDraw.app&lt;/h2&gt;

&lt;p&gt;When we installed the Java runtime, it provided a few extra tools to make the life of a Java developer a little easier. One of these tools is called &lt;a href=&quot;http://nakkaya.com/2009/12/12/creating-mac-os-x-app-bundle-for-java-applications/&quot;&gt;&quot;Jar Bundler.app&quot;&lt;/a&gt;. Sounds promising!&lt;/p&gt;

&lt;p&gt;To open the jar bundler, you can either navigate to &lt;code&gt;/usr/share/java/Tools&lt;/code&gt; or open it in Terminal&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;open /usr/share/java/Tools/Jar&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;Bundler.app
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will allow us to bundle the &lt;code&gt;jaxodraw-2.1-0.jar&lt;/code&gt; file in to a fully-fledged &lt;code&gt;.app&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next to the &quot;Main Class&quot; field, click &quot;Choose...&quot; and select the &lt;code&gt;jaxodraw-2.1-0.jar&lt;/code&gt; file. Click the down arrow just to the left of the &quot;Choose...&quot; button and select &lt;code&gt;net.sf.jaxodraw.JaxoDraw&lt;/code&gt;. Click &quot;Choose Icon...&quot; and select the icon file on your Desktop that we copied there earlier. Your Jar Bundler window should look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/jaxodraw-on-os-x/jar-bundler.png&quot; alt=&quot;Jar Bundler window configured for JaxoDraw&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now hit &quot;Create Application...&quot; and save it to your Applications directory. (Note that the Jar Bundler helpfully renames the application to whatever folder you click on, so when you click on the Applications directory, it will call the JaxoDraw app &quot;Applications&quot;, so make sure to change the field to &quot;JaxoDraw&quot; before saving.)&lt;/p&gt;

&lt;p&gt;Fantastic, we've got a &lt;code&gt;JaxoDraw.app&lt;/code&gt; file sitting in our Applications directory. You can run it just like any other OS X app now. But... wait. Gluon lines crash the app! And we can't export to EPS anymore!&lt;/p&gt;

&lt;p&gt;Never fear. The app isn't &lt;a href=&quot;http://lists.apple.com/archives/java-dev/2009/Jul/msg00125.html&quot;&gt;launching in 32-bit mode&lt;/a&gt; at the moment. To change this, right click on the JaxoDraw app and choose &quot;Get Info&quot;, then check the &quot;Open in 32-bit mode&quot; box. You can reopen JaxoDraw and verify that gluons are now drawable.&lt;/p&gt;

&lt;p&gt;To fix the EPS export issue, we just need to retrace the steps we took earlier: open the JaxoDraw preferences and enter the correct path to &lt;code&gt;latex&lt;/code&gt; and &lt;code&gt;dvips&lt;/code&gt; (that's &lt;code&gt;/usr/texbin/latex&lt;/code&gt; and &lt;code&gt;/usr/texbin/dvips&lt;/code&gt;). Export to EPS is now working again.&lt;/p&gt;

&lt;p&gt;To make the change persist when you close and reopen JaxoDraw, click &quot;Save&quot; when updating the paths in the preferences window.&lt;/p&gt;

&lt;h2&gt;Caveats&lt;/h2&gt;

&lt;p&gt;The only thing I haven't been able to get working, because it's not something that bothers me, is the &quot;Preview&quot; feature in the export window. It requires a PostScript viewer like &lt;a href=&quot;http://pages.cs.wisc.edu/~ghost/&quot;&gt;Ghostview&lt;/a&gt; to work. I imagine that you could download such a viewer and update the &quot;Preferred Postscript viewer&quot; field in the JaxoDraw preferences if you require the preview feature.&lt;/p&gt;

&lt;p&gt;Now that we've finished creating a decent JaxoDraw application bundle, the JaxoDraw image on the desktop and any JaxoDraw stuff in the Downloads folder can be deleted.&lt;/p&gt;

&lt;p&gt;Happy diagramming!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://nabsan.github.io/2012/08/installing-root-on-mountain-lion</id>
    <link type="text/html" rel="alternate" href="http://nabsan.github.io/2012/08/installing-root-on-mountain-lion" />
    <title>Installing ROOT on OS X 10.8 with CMake and Homebrew</title>
    <updated>2012-08-03T00:00:00+09:00</updated>
    <author>
      <name>Nabsan</name>
      <email>nabsan@ikarosu.net</email>
    </author>
    <content type="html">&lt;p&gt;With Mountain Lion, the latest version of OS X, having been &lt;a href=&quot;http://www.theverge.com/2012/7/25/3186764/apple-os-x-10-8-mountain-lion-released&quot;&gt;recently released&lt;/a&gt;, there's been the usual flurry of blog posts on how to &lt;a href=&quot;http://robots.thoughtbot.com/post/27985816073/the-hitchhikers-guide-to-riding-a-mountain-lion&quot;&gt;survive the upgrade&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I recently found myself needing to install &lt;a href=&quot;http://root.cern.ch/&quot;&gt;ROOT&lt;/a&gt;, the high energy physics framework by the folks at CERN. It wasn't easy. The only &lt;a href=&quot;http://blog.philippklaus.de/2012/06/installing-root-cern-on-mac-os-x-10-8-mountain-lion/&quot;&gt;10.8 ROOT tutorial I've found&lt;/a&gt; uses the &lt;code&gt;make; make install&lt;/code&gt; path and doesn't enumerate any of the available configuration options. (I wanted to use &lt;code&gt;cmake&lt;/code&gt; for the &lt;a href=&quot;http://root.cern.ch/drupal/content/building-root-cmake&quot;&gt;Xcode integration&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;The following assumes you're OK using the command line, though all the commands needed are given, and are running OS X 10.8 Mountain Lion. We'll be installing ROOT to its own directory, so if something goes wrong during the install just delete the directory and try again.&lt;/p&gt;

&lt;h2&gt;Setting Up&lt;/h2&gt;

&lt;p&gt;ROOT is distributed as source, so to install it we must download and compile. It has &lt;a href=&quot;http://root.cern.ch/drupal/content/build-prerequisites&quot;&gt;several dependencies&lt;/a&gt; which are required for compilation; we'll use &lt;a href=&quot;http://mxcl.github.com/homebrew/&quot;&gt;Homebrew&lt;/a&gt; to install them.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/xcode/&quot;&gt;Xcode&lt;/a&gt;, Apple's development environment, is required before installing Homebrew. It's &lt;a href=&quot;http://itunes.apple.com/us/app/xcode/id497799835?ls=1&amp;amp;mt=12&quot;&gt;available on the Mac App Store&lt;/a&gt;. Once it's downloaded and installed, open Xcode, then open the following menu items in order: &lt;code&gt;Xcode, Preferences, Downloads, Components&lt;/code&gt;. Choose to install the &quot;Command Line Tools&quot; option.&lt;/p&gt;

&lt;p&gt;Finally in preparation for Homebrew, as &lt;a href=&quot;http://support.apple.com/kb/HT5293&quot;&gt;Mountain Lion doesn't ship with X11&lt;/a&gt;, &lt;a href=&quot;http://xquartz.macosforge.org/landing/&quot;&gt;download XQuartz&lt;/a&gt; 2.7.2 or later. Mount the disk image and use the package install inside.&lt;/p&gt;

&lt;p&gt;Next, launch Terminal (inside &lt;code&gt;/Applications/Utilities/&lt;/code&gt;) and install Homebrew.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ruby &amp;lt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;curl -fsS https://raw.github.com/mxcl/homebrew/go&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
...
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew doctor
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A lot of the warnings that &lt;code&gt;brew doctor&lt;/code&gt; produces can safely be ignored (at least for our purposes). If there's any of them that look particular troubling, Googling almost always uncovers someone with the same problem.&lt;/p&gt;

&lt;p&gt;Remember to add the Homebrew directory to your &lt;code&gt;PATH&lt;/code&gt; by adding the directory (found with &lt;code&gt;brew --prefix&lt;/code&gt;) to your &lt;code&gt;.bashrc&lt;/code&gt;, &lt;code&gt;.zshrc&lt;/code&gt; or whatever shell file you're using (&lt;code&gt;.bashrc&lt;/code&gt; is the OS X default). We'll also add the XQuartz binaries to the &lt;code&gt;PATH&lt;/code&gt; in case anything needs them in the future.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/bin:/opt/X11/bin:&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Start a new Terminal session to pick up the changes.&lt;/p&gt;

&lt;p&gt;Now that Homebrew is installed, we can use it to install the required dependencies. Each may take some time as Homebrew generally compiles from source.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew install gfortran &lt;span class=&quot;c&quot;&gt;# Fortran compiler&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew install python   &lt;span class=&quot;c&quot;&gt;# Python interpreter&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew install pcre     &lt;span class=&quot;c&quot;&gt;# Regular Expressions library&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew install fftw     &lt;span class=&quot;c&quot;&gt;# Fast Fourier Transforms&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew install cmake    &lt;span class=&quot;c&quot;&gt;# Cross-platform make&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can read the post-install caveats any time by reading the &lt;a href=&quot;https://github.com/mxcl/homebrew/tree/master/Library/Formula&quot;&gt;appropriate recipe&lt;/a&gt;. (The only one to really take notice of is the &lt;a href=&quot;https://github.com/mxcl/homebrew/blob/master/Library/Formula/python.rb&quot;&gt;Python installation&lt;/a&gt;, where you might like to use the symlinks provided and add the &lt;code&gt;install-scripts&lt;/code&gt; folder to your &lt;code&gt;PATH&lt;/code&gt;.)&lt;/p&gt;

&lt;p&gt;That's everything required for ROOT to install. Now to download and compile.&lt;/p&gt;

&lt;h2&gt;Installing ROOT&lt;/h2&gt;

&lt;p&gt;We'll be installing ROOT in to the same directory that Homebrew installs things in to, but you can choose whichever directory you like (preferably one which your user owns to avoid lots of &lt;code&gt;sudo&lt;/code&gt;). Create the directory and download ROOT in to it with &lt;a href=&quot;http://curl.haxx.se/docs/manpage.html&quot;&gt;cURL&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /usr/local
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir root
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;root
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl -O ftp://root.cern.ch/root/root_v5.34.01.source.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Unzip the tarball and move it to a &lt;code&gt;src&lt;/code&gt; directory.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gzip -dc root_v5.34.01.source.tar.gz | tar -xf -
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mv root/ src/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Good stuff. All that's left is the compilation with &lt;code&gt;make&lt;/code&gt;. I stumbled a lot here, mainly because of X11. The compiler didn't pick up my XQuartz install so couldn't find &lt;code&gt;X11/Xlib.h&lt;/code&gt;. Luckily &lt;a href=&quot;http://stackoverflow.com/questions/11465258/xlib-h-not-found-when-building-graphviz-on-mountain-lion&quot;&gt;StackOverflow provided the answer&lt;/a&gt;, saying to pass the required directory as a compiler flag.&lt;/p&gt;

&lt;p&gt;We use a few compilers here (&lt;code&gt;clang&lt;/code&gt;, &lt;code&gt;clang++&lt;/code&gt;, &lt;code&gt;gfortran&lt;/code&gt;), so which compiler needs the flags? I got the compilation to work with the following.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;-I/opt/X11/include
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CXXFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;-I/opt/X11/include
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CPPFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;-I/opt/X11/include
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now run &lt;code&gt;cmake&lt;/code&gt; to configure ROOT.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cmake /usr/local/root/src -DCMAKE_INSTALL_PREFIX&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/root -DCMAKE_C_COMPILER&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;clang -DCMAKE_CXX_COMPILER&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;clang++ -Droofit&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ON
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;C_COMPILER&lt;/code&gt; and &lt;code&gt;CXX_COMPILER&lt;/code&gt; are both &lt;a href=&quot;http://en.wikipedia.org/wiki/Clang&quot;&gt;Clang&lt;/a&gt;. If you don't set these flags explicitly CMake may use the GNU compiler &lt;code&gt;gcc&lt;/code&gt; for the &lt;code&gt;C_COMPILER&lt;/code&gt; and Clang for the &lt;code&gt;CXX_COMPILER&lt;/code&gt;, which &lt;a href=&quot;https://savannah.cern.ch/bugs/?96160&quot;&gt;causes errors&lt;/a&gt;. We enabled &lt;a href=&quot;http://roofit.sourceforge.net&quot;&gt;Roofit&lt;/a&gt; for nice fits. If there &lt;a href=&quot;http://root.cern.ch/drupal/content/building-root-cmake#options&quot;&gt;any other ROOT options&lt;/a&gt; you want changed, the &lt;code&gt;cmake&lt;/code&gt; command is the place to specify them.&lt;/p&gt;

&lt;p&gt;Now we can compile ROOT.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make -j 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;-j&lt;/code&gt; flag is the jobs flag and allows the compiler to execute multiple jobs simultaneously, rather than running a linear compilation. I've heard arguments saying that the integer argument should be related to &lt;a href=&quot;http://root.cern.ch/drupal/content/building-root-cmake#options&quot;&gt;the number of cores&lt;/a&gt; on your processor and &lt;a href=&quot;http://www.timocharis.com/help/jn.html&quot;&gt;the number of cores plus one&lt;/a&gt;. Both worked fine for me with a Core 2 Duo processor (&lt;code&gt;-j 2&lt;/code&gt; and &lt;code&gt;-j 3&lt;/code&gt;). If you're on a newer machine with a &lt;a href=&quot;http://en.wikipedia.org/wiki/Intel_Core#Sandy_Bridge_microarchitecture_based&quot;&gt;Core iX processor&lt;/a&gt; you might have 2, 4, or even 6 cores.&lt;/p&gt;

&lt;p&gt;Assuming that worked without fatal errors (and if it did, congratulations! You've achieved the impossible) then there's only one more step. If it &lt;em&gt;didn't&lt;/em&gt; work, you can contact me with the error message to try and sort something, or Google around with some key words from the error message.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, add ROOT to your &lt;code&gt;PATH&lt;/code&gt; using the same procedure as before, such that it might now look something like this.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/bin:/opt/X11/bin:/usr/local/root/bin:&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Remember that this line should be &lt;em&gt;in a shell config file&lt;/em&gt; such as &lt;code&gt;.bashrc&lt;/code&gt;. If you enter this line directly as a command, it will be lost in a new session.&lt;/p&gt;

&lt;p&gt;With that, open a new shell session and try to run ROOT. You should see your X server start and a little ROOT splash window appear.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;root
...
root &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now you're ready to ROOT! To quit, use &lt;code&gt;.q&lt;/code&gt;. If you ever find your stuck in the ROOT command line, try &lt;code&gt;ctrl + c&lt;/code&gt; to interrupt.&lt;/p&gt;

&lt;p&gt;It's a good idea to run the demos to test the installation, using &lt;code&gt;.x&lt;/code&gt; to execute a file.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;root[0] .x /usr/local/root/src/tutorials/demos.C
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are &lt;a href=&quot;http://root.cern.ch/root/html/tutorials/&quot;&gt;many ROOT tutorials included&lt;/a&gt; inside &lt;code&gt;src/tutorials&lt;/code&gt;, and &lt;a href=&quot;http://www.slac.stanford.edu/BFROOT/www/doc/workbook/root1/root1.html&quot;&gt;this Histogram tutorial&lt;/a&gt; gives a brief feel of the syntax. If you ever see a mention of &lt;code&gt;$ROOTSYS&lt;/code&gt;, this refers to the ROOT installation directory in &lt;code&gt;/usr/local/root/src&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Testing&lt;/h3&gt;

&lt;p&gt;If you like, you can compile and run &lt;a href=&quot;http://root.cern.ch/drupal/content/benchmarking&quot;&gt;ROOT's test suite&lt;/a&gt;. To do so, change directory in to &lt;code&gt;$ROOTSYS&lt;/code&gt;, run the &lt;code&gt;thisroot&lt;/code&gt; bash script, and then compile.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /usr/local/root
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;. bin/thisroot.sh
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd test&lt;/span&gt;/
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./stress -b
...
*  &lt;span class=&quot;nv&quot;&gt;ROOTMARKS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1444.7   *  Root5.34/01   20120713/1049
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;We've installed Xcode, XQuartz, and Homebrew, which we've used to install all of the dependencies required for configuring and compiling ROOT. After downloading, configuring, compiling, and installing ROOT, we have ran a demo program to make sure it's working.&lt;/p&gt;

&lt;p&gt;This took me a few hours to figure out, using many online sources which I have tried to link to throughout. If you have problems getting ROOT up and running on 10.8 I'm happy to try and help, or you can try the &lt;a href=&quot;http://root.cern.ch/phpBB3/index.php&quot;&gt;ROOT message board&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://nabsan.github.io/2012/07/deploying-to-a-vps-with-capistrano</id>
    <link type="text/html" rel="alternate" href="http://nabsan.github.io/2012/07/deploying-to-a-vps-with-capistrano" />
    <title>Deploying to a VPS With Capistrano</title>
    <updated>2012-07-11T00:00:00+09:00</updated>
    <author>
      <name>Nabsan</name>
      <email>nabsan@ikarosu.net</email>
    </author>
    <content type="html">&lt;p&gt;Following on from the previous tutorial on &lt;a href=&quot;#&quot;&gt;how to set up a Linux VPS for Ruby apps&lt;/a&gt;, we'll get a simple Ruby site up-and-running by deploying it to our server with &lt;a href=&quot;https://github.com/capistrano/capistrano&quot;&gt;Capistrano&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Capistrano simplifies many of the common tasks encountered when to deploying an app to one or more servers, allowing a push with a simple &lt;code&gt;cap deploy&lt;/code&gt;. Along with Ruby apps, it can be used to deploy static (HTML) pages. The nice thing about using Capistrano rather than something such as &lt;a href=&quot;http://www.samba.org/ftp/rsync/rsync.html&quot;&gt;&lt;code&gt;rsync&lt;/code&gt;&lt;/a&gt; is that we can easily pull the latest version from a git repository, as well as rollback to a previous version.&lt;/p&gt;

&lt;p&gt;I will assume that our VPS has been set up as in my &lt;a href=&quot;#&quot;&gt;VPS setup&lt;/a&gt; post, but the essentials are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SSH access&lt;/li&gt;
&lt;li&gt;Ruby&lt;/li&gt;
&lt;li&gt;A server (nginx, Apache, &amp;hellip;)&lt;/li&gt;
&lt;li&gt;A git repository for the app&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;So, nothing extraordinary.&lt;/p&gt;

&lt;p&gt;We'll be deploying a &lt;a href=&quot;http://sinatrarb.com/&quot;&gt;Sinatra&lt;/a&gt; application. As an example, we'll quickly create a &quot;Hello World!&quot; app and then get it working on the server. Although we'll deploy a &lt;a href=&quot;http://www.sinatrarb.com/&quot;&gt;Sinatra&lt;/a&gt; app to demonstrate the process, but it extends trivially to other Ruby apps.&lt;/p&gt;

&lt;h2&gt;Local Setup&lt;/h2&gt;

&lt;p&gt;Let's create a directory to hold our app, create the Gemfile and install the required gems.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir testing
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;testing
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -e &lt;span class=&quot;s2&quot;&gt;&amp;quot;source :rubygems\n\ngem &amp;#39;sinatra&amp;#39;&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; Gemfile
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle install --path vendor/bundle
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Passing the &lt;code&gt;--path&lt;/code&gt; argument to the &lt;code&gt;bundle&lt;/code&gt; command allows us to locally install gems without messing with systems gems (it allows us to avoid things like RVM gemsets).&lt;/p&gt;

&lt;p&gt;Now the Sinatra gem is installed, we'll initialise a &lt;a href=&quot;http://git-scm.com/&quot;&gt;git&lt;/a&gt; repository.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git init .
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -e &lt;span class=&quot;s2&quot;&gt;&amp;quot;.bundle/\nvendor/bundle&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; .gitignore
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git add .
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;Initial commit.&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;echo&lt;/code&gt; is creating a &lt;code&gt;.gitignore&lt;/code&gt; file which tells git which files and folders to ignore; we don't need to track the &lt;code&gt;.bundle&lt;/code&gt; directory. We &lt;code&gt;git add&lt;/code&gt; all the files to the staging area and then commit them with a message.&lt;/p&gt;

&lt;p&gt;In order for Capistrano to deploy our app, we'll tell it to use git. This means setting up a remote repository, which &lt;a href=&quot;http://github.com&quot;&gt;GitHub&lt;/a&gt; provides for free. Create a &lt;a href=&quot;https://github.com/new&quot;&gt;new repository on GitHub&lt;/a&gt; and add the remote repo to our local one, then push to it.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git remote add origin https://github.com/USERNAME/REPONAME.git
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git push -u origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Our 'app' now exists locally and remotely. When we makes changes locally, we &lt;code&gt;git commit&lt;/code&gt; the changes and the &lt;code&gt;git push&lt;/code&gt; them to GitHub. Each commit effectively acts as a separate release which Capistrano can deploy.&lt;/p&gt;

&lt;h3&gt;Creating the App&lt;/h3&gt;

&lt;p&gt;We'll create a very simple &quot;Hello World!&quot; Sinatra app to test everything works. Firstly, create the application files.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;touch app.rb config.ru
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then fill &lt;code&gt;app.rb&lt;/code&gt;, using your favourite editor, with the following.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Bundler&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;rubygems&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;bundler/setup&amp;quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Sinatra&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;sinatra&amp;quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# The app&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Testing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;Sinatra&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:Base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello, World!&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And fill &lt;code&gt;config.ru&lt;/code&gt; with the following.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;require &lt;span class=&quot;s2&quot;&gt;&amp;quot;./app&amp;quot;&lt;/span&gt;

run Testing
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;a href=&quot;http://www.sinatrarb.com/documentation&quot;&gt;docs&lt;/a&gt; give a comprehensive overview of how to use Sinatra. We can test the app locally to make sure every thing's OK.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rackup config.ru
...
INFO  WEBrick::HTTPServer#start: &lt;span class=&quot;nv&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4885 &lt;span class=&quot;nv&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;9292
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Launch &lt;a href=&quot;http://localhost:9292&quot;&gt;&lt;code&gt;localhost:9292&lt;/code&gt;&lt;/a&gt; to view the site.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/deploying-to-a-vps-with-capistrano/local-hello-world.png&quot; alt=&quot;A &amp;quot;Hello World&amp;quot; Sinatra app.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hurrah! Let's configure the app for deployment. Add &lt;code&gt;gem 'capistrano'&lt;/code&gt; to your Gemfile, which should now look like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:rubygems&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;sinatra&amp;#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;capistrano&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and then install the gem. No need to worry about adding the &lt;code&gt;--path&lt;/code&gt; argument; Bundler remembers the preference in &lt;code&gt;.bundle/config&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add the app file to git repository, commit, then add the changes to the Gemfile, then finally commit again.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git add app.rb config.ru
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;Add the Sinatra app.&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit -a -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;Add Capistrano.&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git push
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;-a&lt;/code&gt; flag adds all modified files, which in this case is the &lt;code&gt;Gemfile&lt;/code&gt; and the &lt;a href=&quot;http://stackoverflow.com/questions/4151495/should-gemfile-lock-be-included-in-gitignore&quot;&gt;lock file&lt;/a&gt; &lt;code&gt;Gemfile.lock&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Setting up Capistrano&lt;/h3&gt;

&lt;p&gt;To get our app set up with Capistrano, we need to 'capify' the folder. This creates two files: &lt;code&gt;Capify&lt;/code&gt;, at the root of the app; and &lt;code&gt;deploy.rb&lt;/code&gt;, inside a &lt;code&gt;config&lt;/code&gt; directory.
The &lt;code&gt;deploy.rb&lt;/code&gt; file is where almost all of the configuration is done. Rather than going through &lt;a href=&quot;https://github.com/capistrano/capistrano/wiki/2.x-Significant-Configuration-Variables&quot;&gt;all the possible configuration options&lt;/a&gt;, we'll use a &lt;a href=&quot;https://github.com/alexpearce/templates/blob/master/deploy.rb&quot;&gt;template deploy file&lt;/a&gt; I've created. It's heavily commented, make sure to understand what it's doing. There's a few things you'll need to change.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:application&lt;/code&gt;: Whatever you like. It just determines what the app's folder on the server is called.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:repository&lt;/code&gt;: Your GitHub repository, or where ever you're hosting the repo remotely.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;:app&lt;/code&gt;, &lt;code&gt;:web&lt;/code&gt; and &lt;code&gt;:db&lt;/code&gt; roles: The IP address or FQDN of the VPS to deploy to.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If you didn't set up your VPS using the &lt;a href=&quot;#&quot;&gt;previous tutorial&lt;/a&gt;, there may be a few other things you need to change.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:user&lt;/code&gt;: If you're not using a deploy user.&lt;/li&gt;
&lt;li&gt;If you're not using &lt;a href=&quot;http://www.modrails.com/&quot;&gt;Passenger&lt;/a&gt;, the &lt;code&gt;start&lt;/code&gt;, &lt;code&gt;stop&lt;/code&gt;, and &lt;code&gt;restart&lt;/code&gt; tasks will need adjusting.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;:admin&lt;/code&gt; namespace contains nginx specific tasks for symlinking the hosts file (which we'll get to shortly) and restarting the server. For &lt;a href=&quot;http://httpd.apache.org/&quot;&gt;Apache&lt;/a&gt; servers the changes needed here will be minimal.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Finally, we'll require an nginx 'hosts' file specific to our app. Again, we'll use a &lt;a href=&quot;https://github.com/alexpearce/templates/blob/master/nginx.app.conf&quot;&gt;template nginx hosts file&lt;/a&gt; I've created. Let's retrieve both of the files.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;capify .
...

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;config
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl https://raw.github.com/alexpearce/templates/master/nginx.app.conf -o nginx.server
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl https://raw.github.com/alexpearce/templates/master/deploy.rb -o deploy.rb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now &lt;strong&gt;edit them accordingly&lt;/strong&gt;. The nginx file requires a few changes.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;server_name&lt;/code&gt;: The IP address of FQDN the app will be accessed at.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;root&lt;/code&gt;: Change &lt;code&gt;APPNAME&lt;/code&gt; to folder name of app, identical to the &lt;code&gt;:application&lt;/code&gt; variable in the Capistrano deploy file.&lt;/li&gt;
&lt;li&gt;Delete the &lt;code&gt;location ^~ /assets/&lt;/code&gt; block. We don't need it as we're not serving a Rails app.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt;Add the files and commit them&lt;/strong&gt; the usual way, then push to GitHub.&lt;/p&gt;

&lt;p&gt;That's it! We're all done locally, we just have a few things to do on our VPS.&lt;/p&gt;

&lt;h2&gt;Remote Setup&lt;/h2&gt;

&lt;p&gt;All commands below are to be run &lt;em&gt;on the remote VPS&lt;/em&gt;, so log in to the VPS via SSH with &lt;code&gt;ssh user@VPS_IP&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In order to allow automated pulling from GitHub, we'll touch GitHub over SSH so our server knows the certficate. As it's the &lt;code&gt;deploy&lt;/code&gt; user who deploys app, we'll assume the identity of &lt;code&gt;deploy&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;su - deploy
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh github.com
y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And that's it! Nice and simple.&lt;/p&gt;

&lt;h2&gt;Deploying&lt;/h2&gt;

&lt;p&gt;We're back &lt;em&gt;working locally&lt;/em&gt; now.&lt;/p&gt;

&lt;p&gt;Inside the app directory, we just need to run a few commands.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cap deploy:setup
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cap deploy:cold
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Done! Visit the site using the IP address or FQDN specified in the &lt;code&gt;nginx.server&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/deploying-to-a-vps-with-capistrano/live-hello-world.png&quot; alt=&quot;The &amp;quot;Hello World&amp;quot; app live on the server.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To fully test our deployment we'll change the &quot;Hello World&quot; text to something different, commit and push the changes then deploy.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nano app.rb
...
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit -a -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;Updated app.&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git push
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cap deploy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now refresh the live app.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/deploying-to-a-vps-with-capistrano/live-change.png&quot; alt=&quot;The deployment worked.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Excellent, everything works!&lt;/p&gt;

&lt;p&gt;We've now created a workflow for updating our app. The procedure in this article is very similar no matter what Ruby application your deploying. For apps that talk to a database, you'll just need to create the database on the server before the cold deploy.&lt;/p&gt;

&lt;p&gt;The advantage with this approach is git management, and for future GitHub-hosted apps we won't have to log in to the VPS at all. We can also deploy HTML apps this way, just place all files that need to have public access inside a &lt;code&gt;public&lt;/code&gt; directory, then &lt;code&gt;capify&lt;/code&gt; the app as normal.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://nabsan.github.io/2012/06/jekyll-sitemaps</id>
    <link type="text/html" rel="alternate" href="http://nabsan.github.io/2012/06/jekyll-sitemaps" />
    <title>Jekyll Sitemaps</title>
    <updated>2012-06-21T00:00:00+09:00</updated>
    <author>
      <name>Nabsan</name>
      <email>nabsan@ikarosu.net</email>
    </author>
    <content type="html">&lt;p&gt;For indexing websites, Google et al. have a &lt;a href=&quot;http://www.sitemaps.org/&quot;&gt;standardised protocol&lt;/a&gt; for creating a sitemap. A sitemap is an XML file containing a list of all pages to be indexed. The &lt;a href=&quot;http://en.wikipedia.org/wiki/Google_Sitemap&quot;&gt;sitemaps Wikipedia article&lt;/a&gt; is more informative than I am on the matter.&lt;/p&gt;

&lt;p&gt;Anyway, I wanted to create a sitemap for this site to &lt;a href=&quot;https://www.google.com/webmasters/tools/&quot;&gt;submit to Google&lt;/a&gt;. This site is very simple as it consists of only three types of pages: a post page, a tag index page, and a category index page. One post page per post, and one tag/category index page per tag/category. (For how I implemented tag/category index pages, see my post on &lt;a href=&quot;#&quot;&gt;simple Jekyll searching&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Listing all the pages is easy.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;&amp;lt;% for post in site.posts %&amp;gt;
...
&amp;lt;% endfor %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Listing the index pages was slightly harder, as the template data &lt;code&gt;sites.tags&lt;/code&gt; is supposed to be used like &lt;code&gt;sites.tags.TAGNAME&lt;/code&gt;, returning a list of all posts with the given tag name. The solution is embedded &lt;a href=&quot;https://groups.google.com/forum/?fromgroups#!topic/jekyll-rb/W_8n8_yvopw&quot;&gt;somewhere here&lt;/a&gt;, specifically these lines:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;&amp;lt;% for category in site.categories %&amp;gt;
  &amp;lt;%= category | first %&amp;gt;
&amp;lt;% endfor %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We just need to use the &lt;a href=&quot;&quot;&gt;liquid filter&lt;/a&gt; &lt;code&gt;first&lt;/code&gt; to get the category name, and equally for tags.&lt;/p&gt;

&lt;p&gt;Consolidating it all into a &lt;code&gt;sitemap.xml&lt;/code&gt; might yield &lt;a href=&quot;http://github.com/alexpearce/alexpearce.github.com/blob/master/sitemap.xml&quot;&gt;something like mine&lt;/a&gt;. If you have any extra pages you can add these in a similar way to posts. Nice!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://nabsan.github.io/2012/06/setting-up-a-vps</id>
    <link type="text/html" rel="alternate" href="http://nabsan.github.io/2012/06/setting-up-a-vps" />
    <title>Setting Up an Ubuntu VPS With rbenv, Nginx and Passenger</title>
    <updated>2012-06-19T00:00:00+09:00</updated>
    <author>
      <name>Nabsan</name>
      <email>nabsan@ikarosu.net</email>
    </author>
    <content type="html">&lt;p&gt;Every once in a while I buy a new VPS, mostly because I'm not entirely satisfied with my current setup. My stack of choice is usually &lt;a href=&quot;https://rvm.io/&quot;&gt;RVM&lt;/a&gt; for Ruby management, the &lt;a href=&quot;http://httpd.apache.org/&quot;&gt;Apache web server&lt;/a&gt;, &lt;a href=&quot;http://www.modrails.com/&quot;&gt;Passenger&lt;/a&gt; for allowing Apache to run Ruby apps like Rails and Sinatra, and &lt;a href=&quot;http://www.mysql.com/&quot;&gt;MySQL&lt;/a&gt; for the database.&lt;/p&gt;

&lt;p&gt;This time around I decided to use some other software that seems to be popular with the community.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For the webserver I chose &lt;a href=&quot;http://nginx.org&quot;&gt;nginx&lt;/a&gt;. There are many &lt;a href=&quot;http://www.wikivs.com/wiki/Apache_vs_nginx&quot;&gt;comparisons&lt;/a&gt; of Apache and nginx, but for such a small-scale server as mine it really boiled down to curiosity.&lt;/li&gt;
&lt;li&gt;RVM has received &lt;a href=&quot;http://rakeroutes.com/blog/how-to-use-bundler-instead-of-rvm-gemsets/&quot;&gt;some flack&lt;/a&gt;, principally because of &lt;a href=&quot;http://gembundler.com/&quot;&gt;Bundler's&lt;/a&gt; ability to manage &quot;gemsets&quot; with Gemfiles. I went with &lt;a href=&quot;https://github.com/sstephenson/rbenv&quot;&gt;rbenv&lt;/a&gt; to &lt;a href=&quot;http://shapeshed.com/using-rbenv-to-manage-rubies/&quot;&gt;manage my rubies&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I stuck with Passenger for allowing the web server to run Ruby apps. Although other solutions exist, like &lt;a href=&quot;http://unicorn.bogomips.org/&quot;&gt;Unicorn&lt;/a&gt; and &lt;a href=&quot;http://code.macournoyer.com/thin/&quot;&gt;Thin&lt;/a&gt;, the configuration required was a little too much for me.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.postgresql.org/&quot;&gt;PostgreSQL&lt;/a&gt; is a popular choice these days. If it's good enough for &lt;a href=&quot;http://railscasts.com/&quot;&gt;Ryan Bates&lt;/a&gt; then it's good enough for me!&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Now that the stack's chosen, it's just a case of setting it all up.&lt;/p&gt;

&lt;h2&gt;Setting Up Ubuntu&lt;/h2&gt;

&lt;p&gt;In this section all commands are executed as the &lt;code&gt;root&lt;/code&gt; user, as when you log in to a fresh install. If you've already got a user set up, prefix all the commands in this section with &lt;code&gt;sudo&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I chose &lt;a href=&quot;http://www.ubuntu.com/&quot;&gt;Ubuntu&lt;/a&gt; as my Linux distribution of choice. The lastest Ubuntu image provided by my VPS host was 11.04, so first I had to update Ubuntu to the latest LTS, 12.04. First, make sure we're up-to-date.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;apt-get -y update
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;apt-get -y upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;-y&lt;/code&gt; flag assumes a 'yes' response for all prompts. Next, as there's no direct upgrade route from 11.04 to 12.04, we need to go via 11.10.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;apt-get install update-manager-core
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;-release-upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Confirm that you want to perform the upgrade, and once that's finished and the VPS restarted (&lt;code&gt;reboot&lt;/code&gt;) Ubuntu will be at 11.10. You can check this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;lsb_release -a
...
Release:        11.10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Perform &lt;code&gt;do-release-upgrade&lt;/code&gt; again to arrive at 12.04 LTS.&lt;/p&gt;

&lt;p&gt;For a basic setting up of our VPS, the Slicehost article on &lt;a href=&quot;http://articles.slicehost.com/2010/4/30/ubuntu-lucid-setup-part-1&quot;&gt;setting up Ubuntu&lt;/a&gt; is great. In particular, make sure to set up the &lt;code&gt;wheel&lt;/code&gt; admin group and get &lt;code&gt;iptables&lt;/code&gt; set up. We'll add a user to the &lt;code&gt;wheel&lt;/code&gt; group later.&lt;/p&gt;

&lt;p&gt;Once that's done, we have a non-&lt;code&gt;root&lt;/code&gt; user with which to log in to the VPS. Log in as that user from your local machine.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh user@12.345.23.91

Welcome to Ubuntu 12.04 LTS &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;GNU/Linux 2.6.38-8-generic x86_64&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Create a user to deploy with and add her to the &lt;code&gt;wheel&lt;/code&gt; group.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo useradd -G wheel deploy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Where &lt;code&gt;deploy&lt;/code&gt; is the username of our new user. Finally, we'll install a few dependencies for later.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo apt-get -y install curl git-core python-software-properties build-essential zlib1g-dev libssl-dev libreadline-gplv2-dev libcurl4-openssl-dev 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Installing the Components&lt;/h1&gt;

&lt;p&gt;We have four main components to install: Ruby, PostgreSQL, Passenger, and nginx. We'll install them in that order, as Passenger comes with a handy command that installs nginx from source for us.&lt;/p&gt;

&lt;p&gt;To install Ruby we'll install &lt;a href=&quot;https://github.com/sstephenson/rbenv&quot;&gt;rbenv&lt;/a&gt;, which allows us to manage multiple rubies on the same machine. As &lt;code&gt;deploy&lt;/code&gt; will be deploying the apps, we need her to have access to the rubies. Assume access as &lt;code&gt;deploy&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;su - deploy
Password:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And install rbenv using the handy &lt;a href=&quot;https://raw.github.com/fesplugas/rbenv-installer/&quot;&gt;rbenv installer&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl https://raw.github.com/fesplugas/rbenv-installer/master/bin/rbenv-installer | bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add the snippet the installer gives you to your &lt;code&gt;.bashrc&lt;/code&gt; and source the file in the shell.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nano .bashrc &lt;span class=&quot;c&quot;&gt;# or any other editor&lt;/span&gt;
...
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;. .bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To make sure we've got all the dependencies required for installing Ruby from source, run &lt;code&gt;rbenv bootstrap-ubuntu-12-04&lt;/code&gt;. We'll install the latest version which is, at the time of writing, 1.9.3 patch 194.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rbenv install 1.9.3-p194
...
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rbenv global 1.9.3-p194
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The last command makes &lt;code&gt;1.9.3-p194&lt;/code&gt; the global, default version of Ruby. You can check the Ruby version with &lt;code&gt;ruby -v&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now we have Ruby, we can install Passenger as a gem and then &lt;a href=&quot;https://github.com/sstephenson/rbenv#section_3.6&quot;&gt;refresh rbenv&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem install passenger
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rbenv rehash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, we install nginx.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo passenger-install-nginx-module
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The installer will figure out if all the dependencies are preset. If they're not, it'll give you a snippet with which to install them. Choose option 1 to let Passenger download, configure, and compile nginx. The default installation directory &lt;code&gt;/opt/nginx&lt;/code&gt; is fine, but some people prefer the more familiar Apache-like directory &lt;code&gt;/etc/nginx&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once that's installed, we'll get a script for nginx that allows us to use the &lt;code&gt;service&lt;/code&gt; command, so we can do stuff like &lt;code&gt;sudo service nginx restart&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo curl https://raw.github.com/JasonGiedymin/nginx-init-ubuntu/master/nginx | cat &amp;gt;&amp;gt; /etc/init.d/nginx
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo chmod +x /etc/init.d/nginx
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo /usr/sbin/update-rc.d -f nginx defaults
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We'll also replace the default nginx configuration with a leaner one. Download the &lt;a href=&quot;https://github.com/alexpearce/templates/blob/master/nginx.conf&quot;&gt;simple config file&lt;/a&gt; and replace the current one (backing up first, of course).&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl https://raw.github.com/alexpearce/templates/master/nginx.conf | cat &amp;gt;&amp;gt; nginx.conf
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo mv /opt/nginx/conf/nginx.conf /opt/nginx/conf/nginx.conf.old &lt;span class=&quot;c&quot;&gt;# back up&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo mv ./nginx.conf /opt/nginx/conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice that this new configuration file &lt;code&gt;include&lt;/code&gt;s files from &lt;code&gt;/opt/nginx/sites-available&lt;/code&gt;. This is similar to how many people set up &lt;a href=&quot;http://www.debianhelp.co.uk/virtualhosts.htm&quot;&gt;Apache with virtual hosts&lt;/a&gt;. For each site we want (generally represented as a (sub)domain or set of (sub)domains) we create a file inside &lt;code&gt;sites-enabled&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you installed nginx to a different directory, such as &lt;code&gt;/etc/nginx&lt;/code&gt;, modify the &lt;code&gt;nginx&lt;/code&gt; init.d and &lt;code&gt;nginx.conf&lt;/code&gt; file to point to the right places. Check everything's working by restarting nginx.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo service nginx restart
* Stopping Nginx Server...
  ...done.
* Starting Nginx Server...
  ...done.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can double-check nginx is working by visiting our VPS IP.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/setting-up-a-vps/nginx-success.png&quot; alt=&quot;A successful nginx installation.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Great! Now we have all we need to run Ruby apps. With something like Rails we need one one more thing though: a database. The version of PostgreSQL in the Ubuntu repository is a little outdated, so we'll install it from an up-to-date &lt;a href=&quot;http://www.makeuseof.com/tag/ubuntu-ppa-technology-explained/&quot;&gt;PPA&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo add-apt-repository ppa:pitti/postgresql
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo apt-get update
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo install postgresql libpq-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;libpq-dev&lt;/code&gt; is a dependency of the &lt;code&gt;pg&lt;/code&gt; gem, which Rails will need to talk to the database. Now that PostgreSQL is installed, we'll change the root password and set up a test user.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pqsql

&lt;span class=&quot;nv&quot;&gt;postgres&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# \password&lt;/span&gt;
Enter new password:
...
&lt;span class=&quot;nv&quot;&gt;postgres&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# create user test with password &amp;#39;secret&amp;#39;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;postgres&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# create database test_production owner test;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;postgres&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# \q&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Good, that's everything for now. Let's try getting a Rails app up and running!&lt;/p&gt;

&lt;h2&gt;Testing&lt;/h2&gt;

&lt;p&gt;We'll get a fresh Rails app going &lt;em&gt;as the deploying user&lt;/em&gt;, so make sure you're logged in as &lt;code&gt;deploy&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;su - deploy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We want each app to have its own set of gems. Using Bundler, we can do this easily &lt;a href=&quot;http://stackoverflow.com/questions/9771172/rbenv-surviving-without-gemsets/9791080#9791080&quot;&gt;with a Gemfile&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir testapp
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;testapp
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;source :rubygems\n\ngem &amp;quot;rails&amp;quot;&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; Gemfile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We now have a Gemfile which Bundler can work with. We now install the &lt;code&gt;bundler&lt;/code&gt; gem, install the stuff in our Gemfile to &lt;code&gt;vendor/bundle&lt;/code&gt; (which will act as our app-specific gemset) and create the Rails test app.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem install bundler
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rbenv rehash
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle install --path vendor/bundle
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rails new . -d postgresql 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Choose &lt;code&gt;Y&lt;/code&gt; to overwrite our Gemfile with the Rails template. Now, install the rest of the Rails dependencies.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle install
...
Your bundle is &lt;span class=&quot;nb&quot;&gt;complete&lt;/span&gt;! It was installed into ./vendor/bundle
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To make sure Rails can talk to the database, edit &lt;code&gt;database.yml&lt;/code&gt; with the test PostgreSQL user and database details.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nano config/database.yml
...
production:
  adapter: postgresql
  encoding: unicode
  database: test_production
  pool: 5
  host: localhost
  username: &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;  &lt;/span&gt;password: secret
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;host: localhost&lt;/code&gt; is particularly important (and not in the default Rails &lt;code&gt;database.yml&lt;/code&gt;); my app wouldn't work without it.&lt;/p&gt;

&lt;p&gt;Now we just need to tell nginx where our Rails app is. As I mentioned earlier, we've set up nginx so that each site has its own config file inside &lt;code&gt;nginx/sites-enabled&lt;/code&gt;. I've uploaded a &lt;a href=&quot;https://github.com/alexpearce/templates/blob/master/nginx.app.conf&quot;&gt;test app config file&lt;/a&gt; on GitHub. We just download this to this nginx directory and &lt;strong&gt;edit it&lt;/strong&gt; so that it points to the right place.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl https://raw.github.com/alexpearce/templates/master/nginx.server.conf | cat &amp;gt;&amp;gt; testapp
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nano testapp
... &lt;span class=&quot;c&quot;&gt;# edit the config file so that it points to our app&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo mv testapp /opt/nginx/sites-enabled/
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo service nginx restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Visiting the VPS IP, it works!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/setting-up-a-vps/rails-success.png&quot; alt=&quot;A successful Rails installation.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Excellent. We've set up a VPS from scratch to serve Ruby applications, installing rbenv, Passenger, nginx, and PostgreSQL. If you'd like to test the Rails app a little further, delete &lt;code&gt;index.html&lt;/code&gt; in the &lt;code&gt;public&lt;/code&gt; directory and scaffold some models. Create, update, and delete a few records to make sure the database is OK.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Inside the ~deploy/testapp directory&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rm public/index.html
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rails g scaffold post title body:text
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;touch tmp/restart.txt &lt;span class=&quot;c&quot;&gt;# this tells passenger to restart the app&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's all for now, next we'll go over deploying from a local machine to the VPS with &lt;a href=&quot;https://github.com/capistrano/capistrano&quot;&gt;Capistrano&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://nabsan.github.io/2012/05/quarkonium-spectrum</id>
    <link type="text/html" rel="alternate" href="http://nabsan.github.io/2012/05/quarkonium-spectrum" />
    <title>The Spectrum of Quarkonium</title>
    <updated>2012-05-18T00:00:00+09:00</updated>
    <author>
      <name>Nabsan</name>
      <email>nabsan@ikarosu.net</email>
    </author>
    <content type="html">&lt;p&gt;As part of my degree I'm taking a computing course which requires two project reports. The second was on finding the roots of &lt;a href=&quot;http://mathworld.wolfram.com/AiryFunctions.html&quot;&gt;the first Airy function&lt;/a&gt; in order to find the charm and beauty quark masses. The first one is in a &lt;a href=&quot;#&quot;&gt;previous post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The report is written in LaTeX, the problem solving was done in Python, and the plotting was done with Mathematica. The &lt;a href=&quot;https://github.com/alexpearce/meson-masses&quot;&gt;entire project is open source on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Compiling&lt;/h2&gt;

&lt;p&gt;The LaTeX document has a few dependencies.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;atlasphysics&lt;/code&gt; which is bundled in the repository.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;siunitx&lt;/code&gt; is found &lt;a href=&quot;ftp://tug.ctan.org/tex-archive/macros/latex/contrib/siunitx/&quot;&gt;here&lt;/a&gt;. It's a nice package which simplifies typesetting units.&lt;/li&gt;
&lt;li&gt;Standard packages such as &lt;code&gt;amsmath&lt;/code&gt;, &lt;code&gt;graphicx&lt;/code&gt;, &lt;code&gt;subfigure&lt;/code&gt; and &lt;code&gt;float&lt;/code&gt;. I use the &lt;a href=&quot;http://www.tug.org/mactex/2011/&quot;&gt;MacTex&lt;/a&gt; distribution for OS X, which ships with these packages by default (and ships with &lt;code&gt;siunitx&lt;/code&gt; too).&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;You can view the &lt;a href=&quot;https://github.com/downloads/alexpearce/meson-masses/Report.pdf&quot;&gt;final compiled PDF on GitHub&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://nabsan.github.io/2012/04/scattering-cross-sections</id>
    <link type="text/html" rel="alternate" href="http://nabsan.github.io/2012/04/scattering-cross-sections" />
    <title>Scattering Cross Sections in the Standard Model</title>
    <updated>2012-04-28T00:00:00+09:00</updated>
    <author>
      <name>Nabsan</name>
      <email>nabsan@ikarosu.net</email>
    </author>
    <content type="html">&lt;p&gt;As part of my degree I'm taking a computing course which requires two project reports. The first was on e+e− &amp;rarr; &amp;mu;+&amp;mu;− scattering, mediated via the photon and the Z boson.&lt;/p&gt;

&lt;p&gt;I wrote the report in LaTeX, with the main program being written in Python. As an extension, I rewrote the bulk of the Python script in C in order to compare the relative performance of the two languages.&lt;/p&gt;

&lt;p&gt;I've open-sourced the entire project, which you can &lt;a href=&quot;https://github.com/alexpearce/eeuu-scattering&quot;&gt;view on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Compiling&lt;/h2&gt;

&lt;p&gt;The C script should compile on just about any system with &lt;a href=&quot;http://gcc.gnu.org/&quot;&gt;gcc&lt;/a&gt; using&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gcc -Wall cross_section.c -o cross_section
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt; The LaTeX document has a few dependencies.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;atlasphysics&lt;/code&gt; which is bundled in the repository.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;feynmp&lt;/code&gt; is found &lt;a href=&quot;http://www.ctan.org/tex-archive/macros/latex/contrib/feynmf&quot;&gt;here&lt;/a&gt;. There's a nice guide to &lt;a href=&quot;http://osksn2.hep.sci.osaka-u.ac.jp/~taku/osx/feynmp.html&quot;&gt;installing &lt;code&gt;feynmp&lt;/code&gt; on OS X here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Standard packages such as &lt;code&gt;amsmath&lt;/code&gt;, &lt;code&gt;graphicx&lt;/code&gt;, &lt;code&gt;subfig&lt;/code&gt; and &lt;code&gt;float&lt;/code&gt;. I use the &lt;a href=&quot;http://www.tug.org/mactex/2011/&quot;&gt;MacTex&lt;/a&gt; distribution for OS X, which ships with these packages by default.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;You can view the &lt;a href=&quot;https://github.com/downloads/alexpearce/eeuu-scattering/Report.pdf&quot;&gt;final compiled report on GitHub&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://nabsan.github.io/2012/04/escaping-liquid-tags-in-jekyll</id>
    <link type="text/html" rel="alternate" href="http://nabsan.github.io/2012/04/escaping-liquid-tags-in-jekyll" />
    <title>Escaping Liquid Tags in Jekyll</title>
    <updated>2012-04-23T00:00:00+09:00</updated>
    <author>
      <name>Nabsan</name>
      <email>nabsan@ikarosu.net</email>
    </author>
    <content type="html">&lt;p&gt;Writing &lt;a href=&quot;#&quot;&gt;the previous post&lt;/a&gt; brought about a problem: How can I write posts about &lt;a href=&quot;http://liquidmarkup.org/&quot;&gt;Liquid tags&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;By default, any Jekyll file containing &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;YAML front matter&lt;/a&gt; will be churned through the Liquid processor. This means that any blog posts, which require YAML front matter, that contain Liquid tags will have them processed producing unwanted results.&lt;/p&gt;

&lt;p&gt;The few solutions to this problem I've seen monkey-patch Jekyll. This works but was a little messy for me, so I went with a JavaScript approach.&lt;/p&gt;

&lt;p&gt;Instead of writing my posts with Liquid tags , I simply substitute in ERB-style brackets.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;erb&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;posts&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endfor&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above will be transformed in to&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;&amp;lt;% for post in site.posts %&amp;gt;
  &amp;lt;%= post.title %&amp;gt;
  &amp;lt;% include post.json %&amp;gt;
&amp;lt;% endfor %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The replacement is done with JavaScript via &lt;code&gt;replaceERBTags($el)&lt;/code&gt;, where &lt;code&gt;$el&lt;/code&gt; is a jQuery object of the element containing the tags to be replaced. The function itself is nothing complex, in fact it's so simple I can't show it because it can't escape itself! So you'll have to be content with viewing it &lt;a href=&quot;https://github.com/alexpearce/alexpearce.github.com/blob/37f92f56e4cf85f96361f52baa523ab1dd900398/assets/js/alexpearce.js#L113&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Syntax Highlighting&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://pygments.org/&quot;&gt;Pygments&lt;/a&gt;, the syntax highlighter used by Jekyll, doesn't support Liquid so we can't get pretty markup. The syntax highlighting above is due to me using a &lt;code&gt;&amp;lt;% highlight erb %&amp;gt;&lt;/code&gt; block. Because I target &lt;code&gt;$('code.text')&lt;/code&gt; elements for tag replacements, i.e. &lt;code&gt;&amp;lt;% highlight text %&amp;gt;&lt;/code&gt; blocks, I needed to use a different lexer to show the ERB tags.&lt;/p&gt;

&lt;p&gt;You &lt;em&gt;could&lt;/em&gt; target &lt;code&gt;code.erb&lt;/code&gt; elements instead, but then you lose the use of ERB tags! I'm not a fan of Liquid, so I plan on doing as few posts on it as possible, hence I'm happier with ERB support. (Plus, any syntax highlighting you did get would only be approximate, and I expect would break down if you had anything but raw Liquid.)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://nabsan.github.io/2012/04/simple-jekyll-searching</id>
    <link type="text/html" rel="alternate" href="http://nabsan.github.io/2012/04/simple-jekyll-searching" />
    <title>Simple Jekyll Searching</title>
    <updated>2012-04-22T00:00:00+09:00</updated>
    <author>
      <name>Nabsan</name>
      <email>nabsan@ikarosu.net</email>
    </author>
    <content type="html">&lt;p&gt;I &lt;a href=&quot;#&quot;&gt;recently made&lt;/a&gt; this blog with &lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt;Jekyll&lt;/a&gt;. It's a nice little program once you get used to it's methodology. Jekyll's daughter, &lt;a href=&quot;http://octopress.org/&quot;&gt;Octopress&lt;/a&gt;, touts itself as being &quot;for hackers&quot; and Jekyll itself isn't much different in this respect.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki&quot;&gt;docs&lt;/a&gt; are lacking examples and this did throw me initially, even leading me to put off making the site for a month or so. Eventually I got round to building the site and found Jekyll to be almost pleasurable to work with.&lt;/p&gt;

&lt;p&gt;There is a certain satisfaction to implementing your own features. When you use packages which do the heavy lifting for you, it's often the case that it's not quite how you'd like it and then you go around changing things anyway. (This was my experience with Octopress, which I eventually abandoned as I found it too opinionated.)&lt;/p&gt;

&lt;h2&gt;Categories &amp;amp; Tags&lt;/h2&gt;

&lt;p&gt;My biggest problem with Jekyll was its seeming lack of support for category and tag index pages. In a blog, visitors generally expect to be able to following tag and category links to a page listing other similarly-grouped pages.&lt;/p&gt;

&lt;p&gt;Jekyll provides no clear cut way of implementing this, but it is possible and not complicated, so I'll go through my own way of solving the problem.&lt;/p&gt;

&lt;h2&gt;search.json&lt;/h2&gt;

&lt;p&gt;The answer was in a &lt;a href=&quot;http://developmentseed.org/blog/2011/09/09/jekyll-github-pages/&quot;&gt;Development Seed blog post on Jekyll&lt;/a&gt;. In particular, they mention how they had created a &lt;code&gt;search.json&lt;/code&gt; file via Jekyll which they use in their AJAX auto-complete searching.&lt;/p&gt;

&lt;p&gt;While I wasn't look for auto-completion, the idea of creating a JSON index of the site was perfect. I could create a script which searched the JSON index for some matching parameter that I passed. After a little thought on deciding how to pass what I wanted to display, I settled on using GET variables.&lt;/p&gt;

&lt;p&gt;I created &lt;code&gt;search.json&lt;/code&gt; (using a blank &lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter&quot;&gt;YAML front matter&lt;/a&gt; to tell Jekyll to parse the file with &lt;a href=&quot;http://liquidmarkup.org/&quot;&gt;Liquid&lt;/a&gt;):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;---
---
[
  &amp;lt;% for post in site.posts %&amp;gt;
    &amp;lt;% include post.json %&amp;gt;,
  &amp;lt;% endfor %&amp;gt;
  null
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;with the &lt;code&gt;post.json&lt;/code&gt; partial in &lt;code&gt;_includes&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text&quot;&gt;{
  &amp;quot;title&amp;quot;    : &amp;quot;&amp;lt;%= post.title %&amp;gt;&amp;quot;,
  &amp;quot;category&amp;quot; : &amp;quot;&amp;lt;%= post.category %&amp;gt;&amp;quot;,
  &amp;quot;tags&amp;quot;     : [&amp;lt;% for tag in post.tags %&amp;gt;&amp;quot;&amp;lt;%= tag %&amp;gt;&amp;quot;,&amp;lt;% endfor %&amp;gt; null],
  &amp;quot;href&amp;quot;     : &amp;quot;&amp;lt;%= post.url %&amp;gt;&amp;quot;,
  &amp;quot;date&amp;quot;     : {
    &amp;quot;day&amp;quot;   : &amp;quot;&amp;lt;%= post.date | date: &amp;quot;%d&amp;quot; %&amp;gt;&amp;quot;,
    &amp;quot;month&amp;quot; : &amp;quot;&amp;lt;%= post.date | date: &amp;quot;%B&amp;quot; %&amp;gt;&amp;quot;,
    &amp;quot;year&amp;quot;  : &amp;quot;&amp;lt;%= post.date | date: &amp;quot;%Y&amp;quot; %&amp;gt;&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;search.json&lt;/code&gt; now generates an array containing &lt;a href=&quot;/search.json&quot;&gt;all of the sites posts&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Implementation&lt;/h2&gt;

&lt;p&gt;First was &lt;code&gt;search.html&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;results&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- `key` listing for `value` --&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;results&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- results lists --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is a blank &lt;code&gt;div&lt;/code&gt; which will hold the search results. I wanted to have tag and category pages, so in my post templates I linked categories with &lt;code&gt;/search.html?category=&amp;lt;%= page.category | downcase %&amp;gt;&lt;/code&gt; and similarly for tags. The JavaScript then needs to grab the GET parameter value, then search the JSON for it.&lt;/p&gt;

&lt;p&gt;The main script is pretty simple.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;&amp;#39;category&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getParam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;category&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;&amp;#39;tags&amp;#39;&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getParam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;tags&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getJSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/search.json&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;posts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filterPostsByPropertyValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Display &amp;#39;no results found&amp;#39; or similar here&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;noResultsPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;layoutResultsPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We have a map of objects we'd like to search (categories and tags), where &lt;code&gt;getParam(key)&lt;/code&gt; retrieves the value of the GET parameter with key &lt;code&gt;key&lt;/code&gt;. For the link &lt;code&gt;/search.html?category=testing&lt;/code&gt;, &lt;code&gt;getParam('category')&lt;/code&gt; returns &lt;code&gt;testing&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Iterating over &lt;code&gt;map&lt;/code&gt;, if the parameter has been specified we grab the JSON index, filter the posts which have the desired properties (posts which match e.g. &lt;code&gt;post.category == 'testing'&lt;/code&gt;) and then display them.&lt;/p&gt;

&lt;p&gt;The function &lt;code&gt;layoutResultsPage&lt;/code&gt; is almost entirely site-specific. In my case, I cycle through each post appending a &lt;code&gt;li&lt;/code&gt; containing a few select properties (date, title, and tags) to a &lt;code&gt;ul&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Caveats&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;I only use one category per post, but the script &lt;em&gt;should&lt;/em&gt; be generic enough to handle multiple categories.&lt;/li&gt;
&lt;li&gt;The script contains a fair amount of HTML, which is ugly inside JavaScript.&lt;/li&gt;
&lt;li&gt;It is not designed to deal with multiple parameters such as &lt;code&gt;?tags=hello&amp;amp;categories=world&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;As it is, the script is heavily tailored for my own use.&lt;/li&gt;
&lt;/ol&gt;


&lt;h2&gt;Source&lt;/h2&gt;

&lt;p&gt;You can view the &lt;a href=&quot;https://github.com/alexpearce/alexpearce.github.com/blob/master/assets/js/alexpearce.js&quot;&gt;final JavaScript on Github&lt;/a&gt; (or in this site's &lt;a href=&quot;/assets/js/alexpearce.js&quot;&gt;source&lt;/a&gt;). I've tried to concisely document any thing particularly funky.&lt;/p&gt;

&lt;p&gt;You can try out the script by clicking any tag or category on this site or &lt;a href=&quot;/search.html?category=tips&quot;&gt;this example&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://nabsan.github.io/2012/04/hello</id>
    <link type="text/html" rel="alternate" href="http://nabsan.github.io/2012/04/hello" />
    <title>Hello</title>
    <updated>2012-04-21T00:00:00+09:00</updated>
    <author>
      <name>Nabsan</name>
      <email>nabsan@ikarosu.net</email>
    </author>
    <content type="html">&lt;p&gt;This my new blog. I plan to post solutions to problems I find my self in when I coding as a reference for myself, and for others.&lt;/p&gt;

&lt;p&gt;The blog is built with &lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt;Jekyll&lt;/a&gt;, a static site generator. You can check out the &lt;a href=&quot;https://github.com/alexpearce/alexpearce.github.com&quot;&gt;source on GitHub&lt;/a&gt;, along with a few other projects I have.&lt;/p&gt;

&lt;p&gt;There are many wonderful resources I used to build this site, most of which I use on a regular basis.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://h5bp.com&quot;&gt;HTML5 Boilerplate&lt;/a&gt; for solid HTML and CSS templates.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.google.com/webfonts&quot;&gt;Google Web Fonts&lt;/a&gt; for the fonts I use here, particularly &lt;a href=&quot;http://www.google.com/webfonts/specimen/Pacifico&quot;&gt;Pacifico&lt;/a&gt; for the fancy logo and &lt;a href=&quot;http://www.google.com/webfonts/specimen/Asap&quot;&gt;Asap&lt;/a&gt; for headers. The body type is Palatino Linotype.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com&quot;&gt;Stack Overflow&lt;/a&gt; for answering all my programming questions. I'm a &lt;a href=&quot;http://stackoverflow.com/users/596068/alex&quot;&gt;semi-active user there&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://premiumpixels.com&quot;&gt;Premium Pixels&lt;/a&gt; provide amazing quality PSDs for web design. Although I didn't use any for this site, it's worth the mention.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If you have any questions or suggestion, please feel free to ask.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://nabsan.github.io/2012/04/hello</id>
    <link type="text/html" rel="alternate" href="http://nabsan.github.io/2012/04/hello" />
    <title>Hello</title>
    <updated>2012-04-21T00:00:00+09:00</updated>
    <author>
      <name>Nabsan</name>
      <email>nabsan@ikarosu.net</email>
    </author>
    <content type="html">&lt;p&gt;This my new blog. I plan to post solutions to problems I find my self in when I coding as a reference for myself, and for others.&lt;/p&gt;

&lt;p&gt;The blog is built with &lt;a href='https://github.com/mojombo/jekyll'&gt;Jekyll&lt;/a&gt;, a static site generator. You can check out the &lt;a href='https://github.com/alexpearce/alexpearce.github.com'&gt;source on GitHub&lt;/a&gt;, along with a few other projects I have.&lt;/p&gt;

&lt;p&gt;There are many wonderful resources I used to build this site, most of which I use on a regular basis.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://h5bp.com'&gt;HTML5 Boilerplate&lt;/a&gt; for solid HTML and CSS templates.&lt;/li&gt;

&lt;li&gt;&lt;a href='http://www.google.com/webfonts'&gt;Google Web Fonts&lt;/a&gt; for the fonts I use here, particularly &lt;a href='http://www.google.com/webfonts/specimen/Pacifico'&gt;Pacifico&lt;/a&gt; for the fancy logo and &lt;a href='http://www.google.com/webfonts/specimen/Asap'&gt;Asap&lt;/a&gt; for headers. The body type is Palatino Linotype.&lt;/li&gt;

&lt;li&gt;&lt;a href='http://stackoverflow.com'&gt;Stack Overflow&lt;/a&gt; for answering all my programming questions. I&amp;#8217;m a &lt;a href='http://stackoverflow.com/users/596068/alex'&gt;semi-active user there&lt;/a&gt;.&lt;/li&gt;

&lt;li&gt;&lt;a href='http://premiumpixels.com'&gt;Premium Pixels&lt;/a&gt; provide amazing quality PSDs for web design. Although I didn&amp;#8217;t use any for this site, it&amp;#8217;s worth the mention.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have any questions or suggestion, please feel free to ask.&lt;/p&gt;</content>
  </entry>
  

</feed>
